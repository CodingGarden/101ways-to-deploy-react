{"version":3,"sources":["views/Links.js","views/About.js","views/RandomGif.js","views/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Links","react_default","a","createElement","Link","to","Component","About","title","width","height","src","frameBorder","allow","allowFullScreen","GIF_URL","RandomGif","state","url","componentDidMount","_callee","response","json","regenerator_default","wrap","_context","prev","next","fetch","sent","_this","setState","data","image_original_url","stop","this","alt","NotFound","className","App","pathname","props","location","role","aria-label","Switch","Route","exact","path","component","withRouter","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAGqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,UAAT,eACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,eAAT,uBANuBC,aCDdC,mLAEjB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oFACAF,EAAAC,EAAAC,cAAA,UAAQK,MAAM,UAAUC,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,YALrLR,sCCA7BS,EAAU,iFAEKC,6MACnBC,MAAQ,CACNC,IAAK,yEAGPC,uCAAoB,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACKC,MAAMb,GADX,cACZM,EADYI,EAAAI,KAAAJ,EAAAE,KAAA,EAECN,EAASC,OAFV,OAEZA,EAFYG,EAAAI,KAGlBC,EAAKC,SAAS,CACZb,IAAKI,EAAKU,KAAKC,qBAJC,wBAAAR,EAAAS,SAAAd,EAAAe,iFAQX,IACCjB,EAAQiB,KAAKlB,MAAbC,IACR,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKQ,IAAKO,EAAKkB,IAAI,gBAjBY9B,aCFlB+B,mLAEjB,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAImC,UAAU,SAAd,sBAJ8BhC,aCOhCiC,0LACK,IACCC,EAAaL,KAAKM,MAAMC,SAAxBF,SACR,OACEvC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,QAAMwC,KAAK,MAAMC,aAAW,OAA5B,0BAAf,UAEe,MAAbJ,EACEvC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KAAT,YACF,KAENJ,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjCC,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW1C,IACtCN,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWjC,IAC3Cf,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWZ,KAE7BpC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,UAAU3B,IAAI,wCAAwCyB,IAAI,mBAlBjE9B,cAyBH4C,cAAWX,GCtBNY,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCVNC,IAASC,OACTvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAD,OACgBC,SAASC,eAAe,SDsHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8858b22f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Links extends Component {\n  render() {\n    return (\n      <section>\n        <small>Click the links below.</small>\n        <h3><Link to=\"/about\">About Page</Link></h3>\n        <h3><Link to=\"/random-gif\">Random GIF</Link></h3>\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n        <h2>This is a website to demonstrate deploying to many different services!</h2>\n        <iframe title=\"youtube\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-THM2R4MJ98\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nconst GIF_URL = 'https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=funny&rating=PG';\n\nexport default class RandomGif extends Component {\n  state = {\n    url: 'https://media.giphy.com/media/l3nWhI38IWDofyDrW/giphy-downsized.gif'\n  }\n\n  componentDidMount = async () => {\n    const response = await fetch(GIF_URL);\n    const json = await response.json();\n    this.setState({\n      url: json.data.image_original_url\n    });\n  }\n  \n  render() {\n    const { url } = this.state;\n    return (\n      <div>\n        <img src={url} alt=\"gif\" />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <div>\n        <h2 className=\"error\">Not Found.</h2>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Switch, Route, Link, withRouter } from 'react-router-dom';\n\nimport Links from './views/Links';\nimport About from './views/About';\nimport RandomGif from './views/RandomGif';\nimport NotFound from './views/NotFound';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const { pathname } = this.props.location;\n    return (\n      <div className=\"App\">\n        <h1>Welcome to <span role=\"img\" aria-label=\"101\">ðŸ’¯ + 1âƒ£</span> ways!</h1>\n        {\n          pathname !== '/' ? (\n            <h3><Link to=\"/\">Go Home</Link></h3>\n          ) : null\n        }\n        <Switch>\n          <Route exact path=\"/\" component={Links} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/random-gif\" component={RandomGif} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n        <section>\n          <img className=\"counter\" src=\"https://ht-ct.now.sh/counters/ghpages\" alt=\"views\" />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter>\n  <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}